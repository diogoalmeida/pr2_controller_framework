common:
  base_link_name: base_link
  chain_base_link_name: torso_lift_link
  end_effector_link_name:
    arm_1: l_wrist_roll_link
    arm_2: r_wrist_roll_link
  force_torque_frame:
    arm_1: l_gripper_tool_frame
    arm_2: r_gripper_tool_frame
  force_torque_sensor_frame:
    arm_1: l_force_torque_link
    arm_2: r_force_torque_link
  solver: # parameters used for the IkSolverVel algorithm
    epsilon: 0.0001
    alpha: 0.5
    maxiter: 200
    nso_weights: 1
  feedback_rate: 100
  force_torque_topic:
    arm_1: /l_ft_sensor/ft_compensated
    arm_2: /l_ft_sensor/ft_compensated_echo

manipulation_controller:
  action_server_name: dexterous_manipulation
  spring_constant: 10.17
  estimate_spring_constant: true
  gains:
    k_1: 0.7
    k_2: 0.7
    k_3: 0.7
  saturations:
    x: 0.1
    y: 0.1
    theta: 0 #0.05
  rotational_gains: [0, 0, 0, 10, 0.0, 10] #[5, 0, 5] # These should be IN THE SURFACE FRAME
  estimate_length: false
  hardcoded_length: 0.11 # from the gripper tool frame to the part tip
  initial_angle_offset: -0.18
  x_offset: -0.02
  wait_for_tf_time: 1
  surface_frame_vertical_offset: -0.01
  surface_frame_horizontal_offset: 0.03
  estimator:
    Q:
      # data: [90, 0, 0, 0, 1, 0, 0, 0, 5]
      # data: [90, 0, 0, 0, 0.001, 0, 0, 0, 1]
      # data: [5, 0, 0, 0, 10.001, 0, 0, 0, 2.5]
      # data: [10000, 0, 0,
      #        0, 10000, 0,
      #        0, 0, 5000]
      data: [10000000, 0, 0,
             0, 10000000, 0,
             0, 0, 5000]
    R:
      # data: [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.002]
      # data: [0.001, 0, 0, 0, 0.004, 0, 0, 0, 0.002]
      # data: [0.001, 0, 0, 0, 0, 0.001, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.001]
      data: [0.01, 0, 0, 0,
             0, 0.01, 0, 0,
             0, 0, 10.001, 0,
             0, 0, 0, 0.00000]

    initial_x_offset: -0.15
    initial_theta_offset: -0.0

approach_controller:
  action_server_name: approach_controller
  rotational_gains: [0, 0, 0, -5, -5, -5]
  contact_detection_time: 0.1

move_controller:
  action_server_name: move_controller
  max_allowed_error: 0.04
  velocity_gain: 15
  error_threshold: 0.02
  ik_service_name:
    arm_1: /pr2_left_arm_kinematics/get_ik
    arm_2: /pr2_right_arm_kinematics/get_ik
  ik_info_service_name:
    arm_1: /pr2_left_arm_kinematics/get_ik_solver_info
    arm_2: /pr2_right_arm_kinematics/get_ik_solver_info

folding_controller:
  action_server_name: folding_controller
  rotational_gains: [0, 0, 0, 0, 0, 0] #[0, 5, 0, 0, -5, 0]
  use_estimates: true
  rod_length: 0.05
  k_omega: 0 #0.1
  k_v: 0 #0.1
  k_force: 0 #-0.005
  estimator:
    Q:
      data: [50.1, 0, 0,
             0, 50.001, 0,
             0, 0, 50.001]
    R:
      data: [0.01, 0, 0,
             0, 0.01, 0,
             0, 0, 0.01]

mechanism_controller:
  action_server_name: mechanism_controller
  rotational_gains: [0, 0, 0, 0, 0, 0] #[0, 0, 0, 0, 1, 0]
  joint_error_lim: 0.025
  use_estimates: false
  rod_length: 0.11
  k_omega: 0.0
  k_v: 0.0
  k_force: 0.0
  estimator:
    Q:
      data: [250.01, 0, 0,
             0, 250.01, 0,
             0, 0, 250.01]
    R:
      data: [0.01, 0, 0,
             0, 0.01, 0,
             0, 0, 0.01]
    constant_gain: 0.001
    adjust_x_force: 1.0 #1.0  # Obtained from experiments with the force torque sensor
    adjust_y_force: 2.04 #2.04 #1.87 
    adjust_z_force: 1.24 #1.24
    
  rotational_estimator:
    Q:
      data: [10.1, 0, 0,
             0, 10.1, 0,
             0, 0, 10.1]
    R:
      data: [0.001, 0, 0,
             0, 0.001, 0,
             0, 0, 0.001]

  ects_controller:
    alpha: 0.5
    beta: 1
    inverse_damping: 0.0001
    optimization_rate: 500
    gradient_delta: 0.001
    max_nullspace_velocities: 0.5
    joint_update_threshold: 0.001
    joint_threshold_count_limit: 10

  adaptive_estimator:
    alpha_force: 0 #0.015
    beta_force: 0 #0.03
    alpha_adapt_t: 1000.1
    alpha_torque: 0 #0.5
    beta_torque: 0 #0.25
    alpha_adapt_r: 100.0
    torque_slack: 0.0 # compensates for sensor bias. We don't want the robot to induce torque at the contact point
    torque_bias: 0.0
